# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MbCsNCg0Wkt-dIEoKlVztMT1yMJu2gU2

# **WELCOME TO SURGE SAVYY**

IMPORTING REQUIRED LIBRARIES
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

"""# Define a function to generate synthetic damage cost based on surge height using a polynomial relationship"""

def generate_damage_cost(surge_height):
    # Define a linear relationship between surge height and damage cost
    # Adjust coefficients based on the expected impact of surge height on damage cost
    # This is a simplistic example, and you may need to refine it based on actual data
    return (100000 * surge_height) ** 2   # Adjust the coefficient as needed

# Load the dataset
data_surge = pd.read_csv("surge.csv")

# Display the first few rows of the dataset
print("Dataset Preview:")
print(data_surge.head())

# Basic statistics of the dataset
print("\nDataset Statistics:")
print(data_surge.describe())

# Visualize the distribution of surge heights
plt.figure(figsize=(12, 6))
sns.histplot(data=data_surge, x='surge m', bins=20, kde=True, color='blue', alpha=0.7)
plt.title('Distribution of Surge Heights')
plt.xlabel('Surge Height (m)')
plt.ylabel('Density')
plt.show()

# Plot the data
plt.figure(figsize=(15, 8))
for i, col in enumerate(data_surge.columns[1:], 1):
    plt.subplot(2, 3, i)
    plt.plot(data_surge['time hours since 1900-01-01 00:00:00.0'], data_surge[col])
    plt.title(col)
    plt.xlabel('Time')
    plt.ylabel(col)
plt.tight_layout()
plt.show()

# Feature selection for surge prediction
X_surge = data_surge[['u10 m s**-1', 'v10 m s**-1', 'msl Pa', 'Distance Weight']]
y_surge = data_surge['surge m']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_surge, y_surge, test_size=0.2, random_state=42)

# Train the surge prediction model (linear regression)
surge_model = LinearRegression()
surge_model.fit(X_train, y_train)

# Make predictions on the testing set
surge_predictions = surge_model.predict(X_test)

# Evaluate the model
surge_mse = mean_squared_error(y_test, surge_predictions)
print("Surge Prediction MSE:", surge_mse)

"""# **SURGE PREDICTION MSE**"""

# Observed vs predicted storm heights plot
plt.figure(figsize=(8, 6))
plt.scatter(y_test, surge_predictions, color='blue', alpha=0.5)
plt.title('Observed vs Predicted Surge Heights')
plt.xlabel('Observed Surge Height (m)')
plt.ylabel('Predicted Surge Height (m)')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle='--', color='red')
plt.show()

# Residual plot: visualize the distribution of residuals
residuals = y_test - surge_predictions
plt.figure(figsize=(8, 6))
sns.histplot(residuals, bins=20, kde=True, color='green', alpha=0.7)
plt.title('Distribution of Residuals')
plt.xlabel('Residuals')
plt.ylabel('Density')
plt.show()

# Finally, print the prediction
print("Predicted Surge Heights:")
print(surge_predictions)

# Generate synthetic damage costs based on surge heights
damage_costs = [generate_damage_cost(height) for height in surge_predictions]

# Split the data into training and testing sets for damage cost prediction
X_train_damage, X_test_damage, y_train_damage, y_test_damage = train_test_split(surge_predictions.reshape(-1, 1), damage_costs, test_size=0.2, random_state=42)

# Train the damage cost prediction model (linear regression)
damage_model = LinearRegression()
damage_model.fit(X_train_damage, y_train_damage)

# Make predictions on the testing set for damage cost prediction
damage_predictions = damage_model.predict(X_test_damage)

# Evaluate the damage cost prediction model
damage_mse = mean_squared_error(y_test_damage, damage_predictions)
print("Damage Cost Prediction MSE:", damage_mse)

# Observed vs predicted damage costs plot
plt.figure(figsize=(8, 6))
plt.scatter(y_test_damage, damage_predictions, color='blue', alpha=0.5)
plt.title('Observed vs Predicted Damage Costs')
plt.xlabel('Observed Damage Cost')
plt.ylabel('Predicted Damage Cost')
plt.plot([min(y_test_damage), max(y_test_damage)], [min(y_test_damage), max(y_test_damage)], linestyle='--', color='red')
plt.show()

# Finally, print the prediction
print("Predicted Damage Costs:")
print(damage_predictions)